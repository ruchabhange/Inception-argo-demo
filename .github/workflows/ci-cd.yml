name: CI and CD
on:
  push:
    branches:
      - master
      - 'feature/**'
  pull_request:
    branches:
      - master
      - 'feature/**'
jobs:
  compile:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        java: [11]
    name: Java ${{ matrix.java }} compile
    steps:
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v6
      - name: Running on the default branch.
        if: steps.branch-name.outputs.is_default == 'true'
        run: |
          echo "Running on default: ${{ steps.branch-name.outputs.current_branch }}"
        # Outputs: "Running on default: master".
      
      - name: Running on a pull request branch.
        if: steps.branch-name.outputs.is_default == 'false'
        run: |
          echo "Running on pr: ${{ steps.branch-name.outputs.current_branch }}"
        # Outputs: "Running on pr: feature/test".
      - name: Checkout Source Code
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-package: jdk
          java-version: ${{ matrix.java }}
      - name: Compile the Project
        run: mvn -B compile 
  security:
    runs-on: ubuntu-latest
    if: contains(fromJson('["pull_request"]'), github.event_name )|| (github.ref == 'refs/heads/master')
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities (Monitor only)
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
      - name: Run Snyk to check for vulnerabilities (test)
        uses: snyk/actions/maven@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
  build_and_test:
    runs-on: ubuntu-latest
    needs: compile
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 14
      uses: actions/setup-java@v1
      with:
        java-version: 14
        server-id: github

        server-username: GITHUB_USER_REF  # env variable name for username

        server-password: GITHUB_TOKEN_REF
    - name: Check working directory
      run: echo "${GITHUB_WORKSPACE}"
    - name: Extract Maven project version
      run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
      id: project

    - name: Generate build number
      id: buildnumber
      uses: einaregilsson/build-number@v3 
      with:
        token: ${{secrets.github_token}}   

    - name: Build project with Maven
      run: | 
           mvn -B package --file pom.xml 
           mvn -B versions:set -DnewVersion=${{ steps.project.outputs.version }}.${{ steps.buildnumber.outputs.build_number }} -DgenerateBackupPoms=false
           mvn deploy  
      env:

          GITHUB_USER_REF: ${{ secrets.GIT_USERNAME }}

          GITHUB_TOKEN_REF: ${{ secrets.GIT_TOKEN }}
    - name: Test
      run: mvn --batch-mode -Dmaven.test.failure.ignore=true test
    - name: Test Report
      uses: phoenix-actions/test-reporting@v8
      id: test-report 
      if: success() || failure()    # run this step even if previous step failed
      with:
        name: JEST Tests            # Name of the check run which will be created
        path: target/surefire-reports/TEST-*.xml    # Path to test results
        reporter: java-junit       # Format of test results
        fail-on-error: 'false'
    - name: Read output variables
      run: |
         echo "url is ${{ steps.test-report.outputs.runHtmlUrl }}"
  #build:
  #  name: Building, Pushing and Deploying the Image
  #  runs-on: ubuntu-latest
  #  steps:
  #  
  #  - name: Checkout
  #    uses: actions/checkout@v2
  #  
  #  - name: Login to DockerHub
  #    uses: docker/login-action@v2
  #    with:
  #      username: ${{ secrets.DOCKER_USERNAME }}
  #      password: ${{ secrets.DOCKER_PASSWORD }}
  #      
  #  - name: File changes for productcatalouge 
  #    id: productcatalouge
  #    uses: tj-actions/changed-files@v34
  #    with:
  #      files: |
  #          /java-sample-application/source-code/productcatalogue/**
  #  - name: File changes for productcatalouge 
  #    id: shopfront
  #    uses: tj-actions/changed-files@v34
  #    with:
  #      files: |
  #          /java-sample-application/source-code/shopfront/**
  #  -  name: Build and push customer image
  #     if: steps.shopfront.outputs.any_changed == 'true'
  #     env:
  #       image-name-productcatalogue: productcatalouge
  #       
  #     id: build-and-push-productcatalouge-image
  #     uses: docker/build-push-action@v3
  #     with:
  #      context: ./java-sample-application/source-code/productcatalogue
  #      push: true
  #      tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.image-name-productcatalouge }}:${{ github.sha }}
  #  
  #      
#