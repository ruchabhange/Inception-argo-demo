name: CI and CD
on:
  push:
    branches:
      - master
      - 'feature/**'
  #  paths:
  #    - ${{ secrets.FILE_CHANGE_PATH_1 }}
  #    - ${{ secrets.FILE_CHANGE_PATH_2 }}
  pull_request:
    branches:
      - master
      - 'feature/**'
  #  paths:
  #    - ${{ secrets.FILE_CHANGE_PATH_1 }}
  #    - ${{ secrets.FILE_CHANGE_PATH_2 }}

jobs:
  compile:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        java: [11]
    name: Java ${{ matrix.java }} compile
    steps:
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v6
      - name: Running on the default branch.
        if: steps.branch-name.outputs.is_default == 'true'
        run: |
          echo "Running on default: ${{ steps.branch-name.outputs.current_branch }}"
        # Outputs: "Running on default: master".
      
      - name: Running on a pull request branch.
        if: steps.branch-name.outputs.is_default == 'false'
        run: |
          echo "Running on pr: ${{ steps.branch-name.outputs.current_branch }}"
        # Outputs: "Running on pr: feature/test".
      - name: Checkout Source Code
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-package: jdk
          java-version: ${{ matrix.java }}
      - name: Compile the Project
        run: mvn -B compile 
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities (Monitor only)
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
      - name: Run Snyk to check for vulnerabilities (test)
        uses: snyk/actions/maven@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
  build_and_test:
    runs-on: ubuntu-latest
    needs: compile
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 14
      uses: actions/setup-java@v1
      with:
        java-version: 14
        server-id: github

        server-username: GITHUB_USER_REF  # env variable name for username

        server-password: GITHUB_TOKEN_REF
    - name: Check working directory
      run: echo "${GITHUB_WORKSPACE}"
    - name: Extract Maven project version
      run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
      id: project

    - name: Generate build number
      id: buildnumber
      uses: einaregilsson/build-number@v3 
      with:
        token: ${{secrets.github_token}}   

    - name: Build project with Maven
      run: | 
           mvn -B package --file pom.xml 
           mvn -B versions:set -DnewVersion=${{ steps.project.outputs.version }}.${{ steps.buildnumber.outputs.build_number }} -DgenerateBackupPoms=false -X
           mvn deploy  
      env:

          GITHUB_USER_REF: ${{ secrets.GIT_USERNAME }}

          GITHUB_TOKEN_REF: ${{ secrets.GIT_TOKEN }}
    - name: Test
      run: mvn --batch-mode -Dmaven.test.failure.ignore=true test
    - name: Test Report
      uses: phoenix-actions/test-reporting@v8
      id: test-report 
      if: success() || failure()    # run this step even if previous step failed
      with:
        name: JEST Tests            # Name of the check run which will be created
        path: ${{ secrets.TEST_RESULT_PATH }}    # Path to test results
        reporter: java-junit       # Format of test results
        fail-on-error: 'false'
    - name: Read output variables
      run: |
         echo "url is ${{ steps.test-report.outputs.runHtmlUrl }}"
    - name: Publish Test Results for shopfront
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        junit_files: "${{ secrets.TEST_RESULT_PATH }} "

    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ secrets.SONAR_PROJECTKEY }}


    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    #- name: File changes for productcatalouge 
    #  id: productcatalouge
    #  uses: tj-actions/changed-files@v34
    #  with:
    #    files: |
    #        /java-sample-application/source-code/productcatalogue/**
    
    -  name: Build and push productcatalouge image
       #if: steps.productcatalouge.outputs.any_changed == 'true'
    #   env:
    #     image-name-productcatalogue: productcatalouge-image
         
       id: build-and-push-productcatalouge-image
       uses: docker/build-push-action@v3
       with:
        context: ${{secrets.DOCKER_FILE_PATH_1 }}
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME_1 }}:${{ github.sha }}
    
    #- name: File changes for shopfront
    #  id: shopfront
    #  uses: tj-actions/changed-files@v34
    #  with:
    #    files: |
    #        /java-sample-application/source-code/shopfront/**

    -  name: Build and push shopfront image
     #  if: steps.shopfront.outputs.any_changed == 'true'
    #   env:
    #     image-name-shopfront: shopfront-image
         
       id: build-and-push-shopfront-image
       uses: docker/build-push-action@v3
       with:
        context: ${{secrets.DOCKER_FILE_PATH_2 }}
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME_2 }}:${{ github.sha }}
        
    -  name: Update Version for productcatalouge image
       #if: steps.productcatalouge.outputs.any_changed == 'true'
       run: |
          version=$(cat ./java-sample-application/kustomize-manifest/overlays/prod/kustomization.yaml | grep productcatalouge-image: | awk '{print $2}' | cut -d ':' -f 2 | rev| cut -c2- | rev)
          echo "$version for Production envirornment"
          sed -i "s/$version/${{ github.sha }}/" ./java-sample-application/kustomize-manifest/overlays/prod/kustomization.yaml
          cat ./java-sample-application/kustomize-manifest/overlays/prod/kustomization.yaml| productcatalouge-image: | awk '{print $2}'
          version=$(cat ./java-sample-application/kustomize-manifest/overlays/test/kustomization.yaml | grep productcatalouge-image: | awk '{print $2}' | cut -d ':' -f 2 | rev | cut -c2- | rev)
          echo "$version for test enviornment"
          sed -i "s/$version/${{ github.sha }}/" ./java-sample-application/kustomize-manifest/overlays/test/kustomization.yaml
          cat ./java-sample-application/kustomize-manifest/overlays/test/kustomization.yaml | grep productcatalouge-image: | awk '{print $2}' 
    
    -  name: Update Version for shopfront image
       #if: steps.shopfront.outputs.any_changed == 'true'
       run: |
          version=$(cat ./java-sample-application/kustomize-manifest/overlays/prod/kustomization.yaml | grep shopfront-image: | awk '{print $2}' | cut -d ':' -f 2 | rev| cut -c2- | rev)
          echo "$version for Production envirornment"
          sed -i "s/$version/${{ github.sha }}/" ./java-sample-application/kustomize-manifest/overlays/prod/kustomization.yaml
          cat ./java-sample-application/kustomize-manifest/overlays/prod/kustomization.yaml| grep shopfront-image:: | awk '{print $2}'
          version=$(cat ./java-sample-application/kustomize-manifest/overlays/test/kustomization.yaml | grep shopfront-image: | awk '{print $2}' | cut -d ':' -f 2 | rev | cut -c2- | rev)
          echo "$version for test enviornment"
          sed -i "s/$version/${{ github.sha }}/" ./java-sample-application/kustomize-manifest/overlays/test/kustomization.yaml
          cat ./java-sample-application/kustomize-manifest/overlays/test/kustomization.yaml | grep shopfront-image:: | awk '{print $2}' 
    -  name: Commit and push changes
       uses: devops-infra/action-commit-push@v0.3
       with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          commit_message: Image version updated
    - name: Run Trivy vulnerability scanner image catalog
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME_1 }}:${{ github.sha }}'
        format: 'table'
#        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
    - name: Run Trivy vulnerability scanner for shopfront
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME_2 }}:${{ github.sha }}'
        format: 'template'
#        exit-code: '1'
        template: '@/contrib/sarif.tpl'
        output: 'trivy-results.sarif'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
    - name: Upload trivy scan results to github security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        